package dynamic.algorithm.baseproblem;
/*
    【70 爬楼梯】：假设你正在爬楼梯。需要 n 阶你才能到达楼顶。
                 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
    【用例1】
            输入：n = 2
            输出：2
            解释：有两种方法可以爬到楼顶。
            1. 1 阶 + 1 阶
            2. 2 阶
    【用例2】
            输入：n = 3
            输出：3
            解释：有三种方法可以爬到楼顶。
            1. 1 阶 + 1 阶 + 1 阶
            2. 1 阶 + 2 阶
            3. 2 阶 + 1 阶
    =====================================================================
    【解题思路】动态规划

    【数学归纳】定义 dp[i] 表示到达第 i 阶，需要 dp[i]种方法
             （1）当 i = 1，dp[1] = 1，即到达第 1 阶，只需要 1 步迈 1 阶，只要 1 种走法
             （2）当 i = 2，dp[2] = 2，即到达第 2 阶，只需要 1 步迈 1 阶一共迈 2 步 或者 只需要 1 步迈 2 阶， 共 2 种走法
             （3）当 i = 3，dp[2] = 3，即到达第 2 阶，需要在 n = 1 的基础上 1 步迈 1 阶一共迈 2 步
                                     或者 在 n = 2 的基础上一步迈 2 阶，共 1 + 2 种走法
                    .......
             （4）当 i = n，需要在 i = n-1 的基础上 1 步迈 2 阶
                           或者 在 i = n-2 的基础上 1 步迈 1 阶一共迈 2 步
                           共 dp[i - 1] + dp[i - 2] 种走法（和斐波那契额数列的递推公式相等）
 */

import java.util.ArrayList;

public class ClimbStairs {
    public int climbStairs(int n) {
        // 定义 dp 数组
        ArrayList<Integer> dp = new ArrayList<>();
        // 初始化 dp 数组
        // 为了避免数组越界，需要把index0位置补上
        dp.add(0,null);
        dp.add(1, 1);
        dp.add(2,2);
        for (int i = 3; i <= n; i++) {
            dp.add(i,dp.get(i - 1) + dp.get(i - 2));
        }
        return dp.get(n);
    }
}
