package dynamic.algorithm.bagproblem;
/*
    【474 一和零】给你一个二进制字符串数组 strs 和两个整数 m 和 n 。
                请你找出并返回 strs 的最大子集的长度，该子集中 最多 有 m 个 0 和 n 个 1。
                如果 x 的所有元素也是 y 的元素，集合 x 是集合 y 的 子集 。

    【用例 1】
            输入：strs = ["10", "0001", "111001", "1", "0"], m = 5, n = 3
            输出：4
            解释：最多有 5 个 0 和 3 个 1 的最大子集是 {"10","0001","1","0"} ，因此答案是 4 。
            其他满足题意但较小的子集包括 {"0001","1"} 和 {"10","1","0"} 。{"111001"} 不满足题意，因为它含 4 个 1 ，大于 n 的值 3。
    【用例2】
            输入：strs = ["10", "0", "1"], m = 1, n = 1
            输出：2
            解释：最大的子集是 {"0", "1"} ，所以答案是 2 。
     ================================================================================================================
     【解题思路】：这不是一个多重背包问题，每个商品还是只能取一个或者一个都不取，只是对背包维度的描述改变了，
                背包的容量不再只通过重量描述，而是通过 0 和 1 的个数从两个维度描述了背包重量。

                1、确定 dp[i][j] 数组含义: 背包重量为（i 个 0，j 个 1）的背包，最多可以放 dp[i][j] 个物品
                2、确定递推公式： dp[i][j] = max(dp[i][j], dp[i - m][j - n] + 1), 放进物品后，数量+1
                3、初始化：当背包容量为 (0, 0) 时，放进的物品个数 也是 0，由于求最大值，为了防止初始值设置的过大，导致覆盖了真实值，
                         dp 数组初始化为 0；
                4、确定遍历顺序：先物品，后背包容量，选择倒叙遍历背包容量

 */
public class OneZero {
    public int findMaxForm(String[] strs, int m, int n) {
        // 确定 dp[i][j] 数组含义: 背包重量为（i 个 0，j 个 1）的背包，最多可以放 dp[i][j] 个物品
        int[][] dp = new int[m + 1][n + 1];

        // 求最大值，初始化足够小就可以了，即 0 ，防止迭代过程出现更新值被覆盖的情况
        // dp[0][0] = 0;

        for (int i = 0;i < strs.length; i++) {
            // 统计字符串中 0 和 1 的个数
            int countZero = 0;
            int countOne = 0;
            for (int j = 0; j < strs[i].length(); j++) {
                if (strs[i].charAt(j) == '0')
                    countZero++;
                else
                    countOne++;
            }
            // 更新迭代公式
            for (int j = m; j >= countZero; j--) {
                for (int k = n; k >= countOne ; k--) {
                    dp[j][k] = Math.max(dp[j][k], dp[j - countZero][k - countOne] + 1);
                }
            }
        }
        return dp[m][n];
    }
}
