package dynamic.algorithm.rob;
/*
    【198 打家劫舍】你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，
                  影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，
                  如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
                  给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。
    【示例 1】
            输入：[1,2,3,1]
            输出：4
            解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
                 偷窃到的最高金额 = 1 + 3 = 4 。
    【示例 2】
            输入：[2,7,9,3,1]
            输出：12
            解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
            偷窃到的最高金额 = 2 + 9 + 1 = 12 。
     ====================================================================================================
     【解题思路】
              1、确定 dp 数组的含义：截至到房间 i （包含i），使用偷窃策略能偷盗的最高金额是 dp[i]
              2、递推公式：（1）如果偷窃房间 i：那么相邻 i - 1 的房间是不能偷的
                             dp[i] = dp[i - 2] + nums[i]
                         （2）如果不偷窃房间 i，那么产生最高金额的偷盗策略一定在 dp[i - 1] 产生
                             dp[i] = dp[i - 1]
                                    dp[i] = max(dp[i - 2] + nums[i], dp[i - 1])
                          注意：dp[i - 1] 仅仅表示 截至到房间 i - 1（包含i），使用偷窃策略能偷盗的最高金额是 dp[i - 1]
                               实际上第 i - 1 个房间有没有被偷是不一定的
              3、初始化 dp 数组：dp[0]: 只有房间 0, 那么能偷盗的最大价值只有房间 0，dp[0] = nums[0];
                              dp[1]: 因为递推公式涉及到 dp[i - 2] 的计算，所以 dp[1] 需要初始化：dp[1] = max(nums[0], nums[1])
                              非 0 非 1 下标元素初始化：由于求最大值，所以初始化为 0
              4、遍历顺序：通过 i - 1 和 i - 2 退出元素 i，所以需要从前向后遍历
              5、打印 dp 数组
 */
public class rob {
    public int rob(int[] nums) {
        // 确定 dp 数组的含义：截至到房间 i （包含i），使用偷窃策略能偷盗的最高金额是 dp[i]
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        for (int i = 2; i < nums.length; i++) {
            dp[i] = Math.max(dp[i - 2] + nums[i], dp[i - 1]);
        }
        return dp[nums.length - 1];
    }
}
