package backtrack.algorithm;

import java.util.ArrayList;
import java.util.List;
/*
    【51 N 皇后】按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。
                n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。
                给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。
                每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。
    【示例 1】
            输入：n = 4
            输出：[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
            解释：如上图所示，4 皇后问题存在两个不同的解法。
    【示例 2】
            输入：n = 1
            输出：[["Q"]]
    =========================================================================================
    【解题思路】1、确定回溯函数参数：row：标记行变量，向下一层递归时，需要确定棋盘上下一行皇后摆放的位置
              2、确定回溯单层递归逻辑：如果不符合棋盘规则：同一行同一列同一斜线上只能有一个皇后，不符合规则需要剪枝
              3、确定回溯终止条件：row 到达棋盘最大行
 */
public class SolveNQueens {
    List<List<String>> result = new ArrayList<>();
    public List<List<String>> solveNQueens(int n) {
        return result;
    }
}
