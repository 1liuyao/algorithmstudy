package greed.algorithm;

import java.util.Arrays;

/*
    【452 用最少数量的箭引爆气球】有一些球形气球贴在一堵用 XY 平面表示的墙面上。
                             墙面上的气球记录在整数数组 points ，其中points[i] = [xstart, xend]
                             表示水平直径在 xstart 和 xend之间的气球。你不知道气球的确切 y 坐标。
                             一支弓箭可以沿着 x 轴从不同点 完全垂直 地射出。
                             在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend，
                             且满足  xstart ≤ x ≤ xend，则该气球会被 引爆 。
                             可以射出的弓箭的数量 没有限制 。 弓箭一旦被射出之后，可以无限地前进。
                             给你一个数组 points ，返回引爆所有气球所必须射出的 最小 弓箭数 。
    【示例 1】
            输入：points = [[10,16],[2,8],[1,6],[7,12]]
            输出：2
            解释：气球可以用2支箭来爆破:
                -在x = 6处射出箭，击破气球[2,8]和[1,6]。
                -在x = 11处发射箭，击破气球[10,16]和[7,12]。
    【示例 2】
            输入：points = [[1,2],[3,4],[5,6],[7,8]]
            输出：4
            解释：每个气球需要射出一支箭，总共需要4支箭。
    【示例 3】
            输入：points = [[1,2],[2,3],[3,4],[4,5]]
            输出：2
            解释：气球可以用2支箭来爆破:
            - 在x = 2处发射箭，击破气球[1,2]和[2,3]。
            - 在x = 4处射出箭，击破气球[3,4]和[4,5]。
     =============================================================================================================
     【解题】求重叠区间个数

               y|
                |  1----6          第 i - 1 个区间
                |    2------8             第 i 个区间
                |          7-----12
                |              10-----16
                |------------------------------
                      ^          ^           x
                      |          |
            1、按照区间左边界进行排序
            2、怎么样判断两个区间不重叠
              （1）第 i - 1 个区间的右边界 小于 第 i 个区间的左边界
              （2）if(points[i - 1][1] < points[i][0])
                  1----3          第 i - 1 个区间
                          5----6  第 i 个区间
                     ^       ^
                     |       |

              （3）如果两个区间不重叠，那么需要的箭数需要增加 ： count++
            3、怎么判断两个区间重叠
              （1）第 i - 1 个区间的右边界 大于等于 第 i 个区间的左边界
              （2）if(points[i - 1][1] >= points[i][0])

                  情况1     1---2            情况2：  1----3
                               2----3                  2-----4
                               ^                        ^
                               |                        |
              （3）如果两个区间重叠，使用箭的数量 不需要增加
              （4）如何判断 第 i - 1 个区间和 第 i + 1 个区间是否重叠
                  情况3     1----4
                             2------5
                               3------6
                                ^
                                |
                  针对情况 3，多个区间重叠的情况，使用箭数不需要增加
                  那么如何判定多个区间重叠的情况：【更新区间最小右边界】

                    i - 1       1----4      第 i - 1 个区间和 第 i 个区间相比较：使用箭数不变，更新第 i 个区间的最小有边界
                       i  i - 1   2------5   第 i 个区间的最小右边界从 5 更新成 4
                               i     3------6   第 i + 1 个区间变成 第 i 个区间，第 i 个区间变成 第 i - 1 个区间
                                                 根据判重条件重新判断 [3, 6] 和 [2 4] 是否重叠
 */
public class FindMinArrowShots {
    public int findMinArrowShots(int[][] points) {
        if (points.length == 0)
            return 0;
        int count = 1;

        Arrays.sort(points, (o1, o2) ->
            Integer.compare(o1[0], o2[0])
        );
        for (int i = 1; i < points.length; i++) {
            // 不重叠
            if (points[i][0] > points[i - 1][1])
                count++;
            else
                points[i][1] = Math.min(points[i - 1][1], points[i][1]);
        }

        return count;
    }
}
