package greed.algorithm;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.stream.Stream;

/*
    【406 根据身高重建队列】假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。
                        每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。
                        请你重新构造并返回输入数组 people 所表示的队列。
                        返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。
    【示例 1】
            输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
            输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
            解释：
                编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
                编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
                编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
                编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
                编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
                编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
                因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。
    【示例 2】
            输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
            输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
     =====================================================================================================================
    【解题思路】多标准下先确定一个再讨论另外一个
            1、先按照身高 hi 从高到低排序，身高相同，再按照 ki 进行升序排序
            [7,0],[4,4],[7,1],[5,0],[6,1],[5,2]  ---->  [7,0],[7,1],[6,1],[5,0],[5,2],[4,4]

            2、再按照 ki 进行排序【插入排序】----》找到规律，按照 ki 的值，把元素插入到索引 ki 处
            [7,0]                                 插入 [7,0]
            [7,0],[7,1]                           插入 [7,1]
            [7,0],[6,1],[7,1]                     插入 [6,1]
            [5,0],[7,0],[6,1],[7,1]               插入 [5,0]
            [5,0],[7,0],[5,2],[6,1],[7,1]         插入 [5,2]
            [5,0],[7,0],[5,2],[6,1],[4,4],[7,1]   插入 [4,4]
 */
public class ReconstructQueue {
    public int[][] reconstructQueue(int[][] people) {
        LinkedList<int[]> result = new LinkedList<>();
        
        Arrays.sort(people, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                if (o2[0] == o1[0])
                    return o1[1] - o2[1];
                return o2[0] - o1[0];
            }
        });

        for (int[] p :
                people) {
            result.add(p[1], p);
        }

        return result.toArray(new int[0][]);
    }
}
