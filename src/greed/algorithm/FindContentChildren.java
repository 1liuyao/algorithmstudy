package greed.algorithm;

import java.util.Arrays;

/*
    【455 分发饼干】假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。
                  对每个孩子 i，都有一个胃口值 g[i]，这是能让孩子们满足胃口的饼干的最小尺寸；
                  并且每块饼干 j，都有一个尺寸 s[j] 。
                  如果 s[j] >= g[i]，我们可以将这个饼干 j 分配给孩子 i ，这个孩子会得到满足。
                  你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。

    【示例 1】
            输入: g = [1,2,3], s = [1,1]
            输出: 1
            解释:
            你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。
            虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。
            所以你应该输出1。
    【示例 2】
            输入: g = [1,2], s = [1,2,3]
            输出: 2
            解释:
            你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。
            你拥有的饼干数量和尺寸都足以让所有孩子满足。
            所以你应该输出2.
    =======================================================================================
    【解题思路】
            1、饼干浪费现象：大饼干分给胃口小的孩子
            2、思路一：为避免浪费现象，大饼干尽量分给大胃口的孩子
                     【胃口】g[i] 1 2 3   （1）首先需要对 g 和 s 进行排序
                                     i   （2）饼干 2 能为给 胃口 3 吗？ 不能  i--
                     【饼干】s[i] 1 2     （3）饼干 2 能为给 胃口 2 吗？ 能    i-- j--
                                   j     （4）饼干 1 能为给 胃口 1 吗？ 能    i-- j--
              （5）步骤：① 对两个数组进行排序
                       ② 对两个数组进行倒叙遍历，无论饼干能否满足胃口，g 的遍历指针一直向前移动
                          只有当 饼干 被分配出去了，s 的遍历指针才移动，所以遍历顺序一定是外层遍历 g，内层遍历 s
            3、思路二：为避免浪费现象，小饼干尽量分给小胃口的孩子
 */
public class FindContentChildren {
    public int findContentChildren(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s);

        // 遍历饼干指针
        int j = s.length - 1;
        int result = 0;
        // 大饼干尽量喂给胃口大的孩子
        for (int i = g.length - 1; i >= 0; i--) {
            // 为 大饼干 找到可以 分配的 最大胃口 孩子
            if (j >=0 && s[j] >= g[i]){
                result++;
                j--;
            }
        }
        return result;
    }
    public int findContentChildren1(int[] g, int[] s) {
        Arrays.sort(g);
        Arrays.sort(s);

        // 遍历饼干指针
        int j = 0;
        int result = 0;
        // 小饼干尽量喂给胃口小的孩子
        // 坑：此时外层需要遍历 饼干，针对 g=[7 8 9 10] s=[5 6 7 8]
        // 这种 s 开始就比 g 小，所以无论如果外层循环 遍历 孩子 的话，会导致 可能匹配的上大饼干的孩子，由于遍历指针一直移动，错过了那块饼干
        for (int i = 0; i < s.length; i++) {
            // 为 小饼干 找到可以 分配的 最小胃口 孩子
            if (s[i] >= g[j]){
                result++;
                j++;
            }
        }
        return result;
    }
}
