package hashtable.algorithm;

import java.util.HashSet;

/*
    【202 快乐数】编写一个算法来判断一个数 n 是不是快乐数。
               「快乐数」 定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。
                               然后重复这个过程直到这个数变为 1，也可能是 无限循环 但始终变不到 1。
                               如果这个过程 结果为 1，那么这个数就是快乐数。
                               如果 n 是 快乐数 就返回 true ；不是，则返回 false 。
    【示例 1】
            输入：n = 19
            输出：true
            解释：
            1方 + 9方 = 82
            8方 + 2方 = 68
            6方 + 8方 = 100
            1方 + 0方 + 0方 = 1
    【示例 2】
            输入：n = 2
            输出：false
    =========================================================================================
    【解题思路】
            1、明确怎么求一个数字各个位上的平方和
               （1）求个位：n % 10
               （2）求十位：n / 10 % 10
               （3）求百位：n / 10 / 10 %10
            2、明确什么样的数字 不是 快乐数：
               2方 = 4
               4方 = 16----------------
               1方 + 6方 = 37          |
               3方 + 7方 = 58          |
               5方 + 8方 = 89          |   各个位上的平方和出现重复，也就是说，在不断求和的过程中，一旦出现了和重复，则用还不可能是快乐数
               8方 + 9方 = 145         |
               1方 + 4方 + 5方 = 42    |
               4方 + 2方 = 20          |
               2方 + 0方 = 4------------
            3、这种发现和重复的过程就可以通过hash表来实现：对每一个新产生的位和判断是否在hash表中存在过
            4、不确定有多少个位和需要放进 hash 表，所以
 */
public class IsHappy {
    public boolean isHappy(int n) {
        HashSet<Integer> hash = new HashSet<>();
        while(n != 1){
            if (hash.contains(n))
                return false;
            else {
                hash.add(n);
            }
            n = getSum(n);
        }
        return true;
    }

    public int getSum(int n){
        int sum = 0;
        while (n != 0){
            int ge = n % 10;
            sum = sum + ge * ge;
            n = n / 10;
        }
        return sum;
    }
}
